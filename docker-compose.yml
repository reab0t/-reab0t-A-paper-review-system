version: '3.8'

services:
  # Nacos服务发现和配置中心
  nacos:
    image: nacos/nacos-server:v2.2.3
    container_name: nacos
    environment:
      MODE: standalone
      SPRING_DATASOURCE_PLATFORM: mysql
      MYSQL_SERVICE_HOST: mysql
      MYSQL_SERVICE_DB_NAME: paper_review
      MYSQL_SERVICE_PORT: 3306
      MYSQL_SERVICE_USER: root
      MYSQL_SERVICE_PASSWORD: root
    ports:
      - "8848:8848"
    volumes:
      - ./data/nacos:/home/nacos/data
      - ./logs/nacos:/home/nacos/logs
    depends_on:
      - mysql
    restart: always

  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: paper_review
    ports:
      - "3306:3306"
    volumes:
      - ./data/mysql:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always

  # Redis缓存
  redis:
    image: redis:7.0
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    restart: always

  # MinIO对象存储
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./data/minio:/data
    restart: always

  # RabbitMQ消息队列
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    restart: always

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.11.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data

  # Logstash
  logstash:
    image: logstash:8.11.1
    container_name: logstash
    depends_on:
      - elasticsearch
    ports:
      - "5044:5044"
    volumes:
      - ./config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline

  # Kibana
  kibana:
    image: kibana:8.11.1
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  # Prometheus监控
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - ./data/prometheus:/prometheus

  # Grafana可视化
  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana

  user-service:
    build: ./backend/user-service
    container_name: user-service
    ports:
      - "8081:8081"
    depends_on:
      - mysql
      - redis
      - nacos
    restart: always

  paper-service:
    build: ./backend/paper-service
    container_name: paper-service
    ports:
      - "8082:8082"
    depends_on:
      - mysql
      - redis
      - nacos
      - minio
    restart: always

  review-service:
    build: ./backend/review-service
    container_name: review-service
    ports:
      - "8083:8083"
    depends_on:
      - mysql
      - redis
      - nacos
      - rabbitmq
    restart: always

  gateway:
    build: ./backend/gateway
    container_name: gateway
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - paper-service
      - review-service
    restart: always

  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "80:80"
    depends_on:
      - gateway
    restart: always

# 自定义网络配置
networks:
  paper-review-network:                # 创建名为 paper-review-network 的网络
    driver: bridge                     # 使用 bridge 驱动，用于容器间通信

# 数据卷配置
volumes:
  mysql-data:                          # MySQL 数据持久化卷
  redis-data:                          # Redis 数据持久化卷
  rabbitmq-data:                       # RabbitMQ 数据持久化卷
  minio-data:                         # MinIO 数据持久化卷
  elasticsearch-data:                  # Elasticsearch 数据持久化卷
  prometheus-data:                    # Prometheus 数据持久化卷
  grafana-data:                       # Grafana 数据持久化卷 