# CI/CD 流水线配置
name: CI/CD Pipeline

# 触发条件：当推送到 main、develop 或 release/* 分支时，或者对这些分支发起 PR 时
on:
  push:
    branches: [ main, develop, 'release/*' ]
  pull_request:
    branches: [ main, develop ]

# 定义工作流程
jobs:
  # 构建和测试任务
  build-and-test:
    runs-on: ubuntu-latest    # 在最新版本的 Ubuntu 运行器上运行
    
    steps:
    # 检出代码
    - uses: actions/checkout@v3
    
    # 配置 Java 开发环境
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'           # 使用 JDK 21
        distribution: 'temurin'      # 使用 Eclipse Temurin 发行版
        cache: maven                 # 启用 Maven 缓存
    
    # 构建和测试后端服务
    - name: Build and Test Backend
      run: |
        cd backend
        ./mvnw clean verify        # 使用 Maven Wrapper 进行构建
    
    # 配置 Node.js 环境
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'          # 使用 Node.js 16
        cache: 'npm'                # 启用 npm 缓存
        cache-dependency-path: frontend/package-lock.json
    
    # 构建和测试前端项目
    - name: Build Frontend
      run: |
        cd frontend
        npm ci                      # 清洁安装依赖
        npm run build              # 构建前端项目
        npm run test               # 运行前端测试
    
    # 运行 SonarQube 代码质量分析
    - name: Run SonarQube Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        cd backend
        ./mvnw sonar:sonar \
          -Dsonar.projectKey=paper-review-system \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.java.source=21
    
  # Docker 镜像构建任务
  docker-build:
    needs: build-and-test           # 依赖于 build-and-test 任务完成
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/'))
    
    steps:
    - uses: actions/checkout@v3
    
    # 设置 QEMU 用于多架构构建
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    # 设置 Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    # 登录到 Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # 构建并推送 Docker 镜像
    - name: Build and push Docker images
      run: |
        docker-compose build
        docker-compose push
    
  # 部署到开发环境
  deploy-dev:
    needs: docker-build             # 依赖于 docker-build 任务完成
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'    # 仅在 develop 分支上执行
    environment:
      name: development
      url: https://dev.your-domain.com
    
    steps:
    # 使用 SSH 部署到开发服务器
    - name: Deploy to Dev Environment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEV_SERVER_HOST }}
        username: ${{ secrets.DEV_SERVER_USER }}
        key: ${{ secrets.DEV_SERVER_SSH_KEY }}
        script: |
          cd /opt/paper-review-system
          git pull origin develop
          docker-compose pull
          docker-compose up -d
          ./scripts/health-check.sh
    
  # 部署到预发布环境
  deploy-staging:
    needs: docker-build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/')    # 仅在 release 分支上执行
    environment:
      name: staging
      url: https://staging.your-domain.com
    
    steps:
    # 使用 SSH 部署到预发布服务器
    - name: Deploy to Staging Environment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_SERVER_HOST }}
        username: ${{ secrets.STAGING_SERVER_USER }}
        key: ${{ secrets.STAGING_SERVER_SSH_KEY }}
        script: |
          cd /opt/paper-review-system
          git pull origin ${GITHUB_REF#refs/heads/}
          docker-compose pull
          docker-compose up -d
          ./scripts/health-check.sh
          ./scripts/run-e2e-tests.sh
    
  # 部署到生产环境
  deploy-prod:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'    # 仅在 main 分支上执行
    environment:
      name: production
      url: https://your-domain.com
    
    steps:
    # 使用 SSH 部署到生产服务器
    - name: Deploy to Production Environment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_SERVER_HOST }}
        username: ${{ secrets.PROD_SERVER_USER }}
        key: ${{ secrets.PROD_SERVER_SSH_KEY }}
        script: |
          cd /opt/paper-review-system
          git pull origin main
          docker-compose pull
          docker-compose up -d --remove-orphans
          ./scripts/health-check.sh
          ./scripts/notify-deployment.sh 